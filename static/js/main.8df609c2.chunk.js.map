{"version":3,"sources":["components/SearchWeather.js","App.js","reportWebVitals.js","index.js"],"names":["axios","require","SearchWeather","props","useState","location","setLocation","cityList","setCityList","undefined","currentInfo","setCurrentInfo","getCityWeather","city_name","a","get","data","console","log","current","is_day","hoursData","forecast","forecastday","day","concat","hour","newHoursData","time","push","count","last_updated_epoch","time_epoch","parseInt","split","daytag","toString","currentComponent","className","style","display","justifyContent","opacity","Helmet","Card","sx","maxWidth","maxHeight","Typography","gutterBottom","variant","component","name","Table","TableHead","TableRow","class","TableCell","CardMedia","height","weight","image","condition","icon","alt","text","temp_f","feelslike_f","CardContent","color","TableBody","wind_mph","humidity","vis_miles","mintemp_f","maxtemp_f","TableContainer","stickyHeader","map","idx","useEffect","getData","id","type","onInput","e","target","value","onChange","placeholder","required","cityName","Button","onClick","App","setColor","chanageBG","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8df609c2.chunk.js","sourcesContent":["import { Button, TableCell } from \"@mui/material\";\nimport { useState, useEffect } from \"react\";\nimport { Card } from \"@mui/material\";\nimport Typography from \"@mui/material/Typography\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport { CardActionArea, CardActions } from \"@mui/material\";\nimport { maxHeight } from \"@mui/system\";\nimport { TableBody, TableHead, TableRow, Table } from \"@mui/material\";\nimport Carousel from \"react-material-ui-carousel\";\nimport { Container } from \"@mui/material\";\nimport Paper from \"material-ui/Paper\";\nimport List from \"material-ui/List\";\nimport { TableContainer } from \"@mui/material\";\nimport { Helmet } from \"react-helmet\";\n\nconst axios = require(\"axios\");\n\nconst SearchWeather = (props) => {\n  const [location, setLocation] = useState(\"\");\n  const [cityList, setCityList] = useState([]);\n  const [currentInfo, setCurrentInfo] = useState(undefined);\n\n  const getCityWeather = async (city_name) => {\n    const { data } = await axios.get(\n      \"http://api.weatherapi.com/v1/forecast.json?key=719118a20e3848eeb40141335212111&q=\" +\n        city_name +\n        \"&days=3\"\n    );\n\n    console.log(data.current.is_day);\n\n    let hoursData = [];\n\n    for (let day of data.forecast.forecastday) {\n      hoursData = hoursData.concat(day.hour);\n    }\n\n    const newHoursData = [];\n\n    data.current.time = \"Now\";\n\n    newHoursData.push(data.current);\n    let count = 0;\n\n    for (let hour of hoursData) {\n      if (count > 10) {\n        break;\n      }\n\n      if (data.current.last_updated_epoch > hour.time_epoch) {\n        continue;\n      }\n\n      hour.time = parseInt(hour.time.split(\" \")[1].split(\":\")[0]);\n\n      const daytag = hour.time > 11 ? \"PM\" : \"AM\";\n\n      hour.time = hour.time % 12;\n\n      hour.time = hour.time == 0 ? hour.time + 12 : hour.time;\n\n      hour.time = hour.time.toString() + daytag;\n      newHoursData.push(hour);\n      count = count + 1;\n    }\n\n    hoursData = newHoursData;\n\n    const currentComponent = (\n      <div\n        className=\"currentWeather\"\n        style={{ display: \"flex\", justifyContent: \"center\", opacity: 0.75 }}\n      >\n        <Helmet>\n          <script>\n            {\n              \"document.body.style.backgroundImage=`url('https://wallpaperaccess.com/full/1996509.jpg')`; \"\n            }\n          </script>\n        </Helmet>\n        <Card sx={{ maxWidth: 420, maxHeight: 1200 }}>\n          <Typography gutterBottom variant=\"h5\" component=\"div\">\n            {data.location.name}\n          </Typography>\n          <Table>\n            <TableHead>\n              <TableRow class=\"heading\">\n                <TableCell key=\"1\">\n                  {\" \"}\n                  <span>\n                    <CardMedia\n                      component=\"img\"\n                      height=\"64\"\n                      weight=\"64\"\n                      image={data.current.condition.icon}\n                      alt=\"weather icon\"\n                    />\n                  </span>\n                  <span>{data.current.condition.text}</span>\n                  <br />\n                  <span>{data.current.is_day == 1 ? \"Day\" : \"Night\"}</span>\n                </TableCell>\n                <TableCell>\n                  <span class=\"fahrenheit\">{data.current.temp_f} F</span>\n                  <br />\n                  <span> Feels Like {data.current.feelslike_f} F</span>\n                </TableCell>\n              </TableRow>\n            </TableHead>\n          </Table>\n\n          <CardContent>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              <Table>\n                <TableHead>\n                  <TableRow class=\"heading\">\n                    <TableCell>Wind</TableCell>\n                    <TableCell>Humidity</TableCell>\n                    <TableCell>Visibility</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  <TableRow class=\"body\">\n                    <TableCell>{data.current.wind_mph} m/h</TableCell>\n                    <TableCell>{data.current.humidity} %</TableCell>\n                    <TableCell>{data.current.vis_miles} miles</TableCell>\n                  </TableRow>\n                  <TableRow class=\"heading\">\n                    <TableCell></TableCell>\n                    <TableCell>Low</TableCell>\n                    <TableCell>High</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    {\" \"}\n                    <TableCell>Today</TableCell>\n                    <TableCell>\n                      {data.forecast.forecastday[0].day.mintemp_f + \" F\"}\n                    </TableCell>\n                    <TableCell>\n                      {data.forecast.forecastday[0].day.maxtemp_f + \" F\"}\n                    </TableCell>\n                  </TableRow>\n                  <TableRow>\n                    {\" \"}\n                    <TableCell>Tomorrow</TableCell>\n                    <TableCell>\n                      {data.forecast.forecastday[1].day.mintemp_f + \" F\"}\n                    </TableCell>\n                    <TableCell>\n                      {data.forecast.forecastday[1].day.maxtemp_f + \" F\"}\n                    </TableCell>\n                  </TableRow>\n                  <TableRow>\n                    {\" \"}\n                    <TableCell>Day After Tomorrow</TableCell>\n                    <TableCell>\n                      {data.forecast.forecastday[2].day.mintemp_f + \" F\"}\n                    </TableCell>\n                    <TableCell>\n                      {data.forecast.forecastday[2].day.maxtemp_f + \" F\"}\n                    </TableCell>\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </Typography>\n          </CardContent>\n          <TableContainer style={{ maxHeight: 150 }}>\n            <Table stickyHeader>\n              <TableRow>\n                {hoursData.map((hour, idx) => {\n                  return (\n                    <TableCell>\n                      <span>{hour.time}</span>\n                      <span>\n                        <CardMedia\n                          component=\"img\"\n                          height=\"60\"\n                          weight=\"60\"\n                          image={hour.condition.icon}\n                          alt=\"green iguana\"\n                        />\n                      </span>\n                      <span>{hour.temp_f}F </span>\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            </Table>\n          </TableContainer>\n        </Card>\n      </div>\n    );\n\n    setCurrentInfo(currentComponent);\n  };\n\n  useEffect(() => {\n    async function getData() {\n      if (location === \"\") {\n        return;\n      }\n      const { data } = await axios.get(\n        \"http://api.weatherapi.com/v1/search.json?key=719118a20e3848eeb40141335212111&q=\" +\n          location\n      );\n      setCityList(data);\n    }\n    getData();\n  }, [location]);\n\n  return (\n    <div class=\"MainComponent\">\n      <div class=\"searchComponent\" style={{ opacity: 0.75 }}>\n        <input\n          className=\"form-control\"\n          name=\"city\"\n          id=\"city\"\n          type=\"city\"\n          height=\"100\"\n          onInput={(e) => {\n            setLocation(e.target.value);\n          }}\n          onChange={() => {\n            setCurrentInfo(\"\");\n          }}\n          placeholder=\"Enter a minimum of three characters to search cities\"\n          value={location}\n          required\n        />\n        <br />\n        {cityList &&\n          cityList.map((cityName) => {\n            return (\n              <div key={cityName.name}>\n                <br />\n                <Button\n                  onClick={(e) => {\n                    getCityWeather(cityName.name);\n                    setCityList([]);\n                    setLocation(\"\");\n                  }}\n                  style={{\n                    color: \"black\",\n                  }}\n                >\n                  {cityName.name}\n                </Button>\n              </div>\n            );\n          })}\n        <div id=\"myDropdown\" class=\"dropdown-content\"></div>\n      </div>\n      <br />\n      <br />\n      {currentInfo}\n    </div>\n  );\n};\n\nexport default SearchWeather;\n","import \"./App.css\";\nimport { React, useState } from \"react\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport SearchWeather from \"./components/SearchWeather\";\nimport ShowWeather from \"./components/ShowWeather\";\n\nfunction App() {\n  const [color, setColor] = useState(\"red\");\n  return (\n    <div className=\"App\">\n      <h1> Weather</h1>\n      <SearchWeather chanageBG={setColor} />\n      <Routes>\n        <Route exact path=\"/\" component={SearchWeather} />\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}