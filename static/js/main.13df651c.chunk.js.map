{"version":3,"sources":["components/SearchWeather.js","App.js","reportWebVitals.js","index.js"],"names":["axios","require","SearchWeather","props","useState","location","setLocation","cityList","setCityList","undefined","currentInfo","setCurrentInfo","api","process","getCityWeather","city_name","a","get","data","hoursData","forecast","forecastday","day","concat","hour","newHoursData","current","time","push","count","last_updated_epoch","time_epoch","parseInt","split","daytag","toString","currentComponent","className","Helmet","Container","style","display","justifyContent","opacity","alignItems","Card","maxWidth","maxHeight","Typography","gutterBottom","variant","component","name","Table","TableHead","TableRow","class","TableCell","CardMedia","height","weight","image","condition","icon","alt","text","is_day","temp_f","feelslike_f","CardContent","color","TableBody","wind_mph","humidity","vis_miles","mintemp_f","maxtemp_f","TableContainer","stickyHeader","map","idx","useEffect","console","log","getData","id","type","onInput","e","target","value","onChange","placeholder","required","cityName","Button","onClick","backgroundColor","App","setColor","chanageBG","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13df651c.chunk.js","sourcesContent":["import { Button, TableCell } from \"@mui/material\";\nimport { useState, useEffect } from \"react\";\nimport { Card } from \"@mui/material\";\nimport Typography from \"@mui/material/Typography\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport { TableBody, TableHead, TableRow, Table } from \"@mui/material\";\nimport { Container } from \"@mui/material\";\nimport { TableContainer } from \"@mui/material\";\nimport { Helmet } from \"react-helmet\";\n\nconst axios = require(\"axios\");\n\nconst SearchWeather = (props) => {\n  const [location, setLocation] = useState(\"\");\n  const [cityList, setCityList] = useState([]);\n  const [currentInfo, setCurrentInfo] = useState(undefined);\n\n  const api = process.env.REACT_APP_SECRET_KEY;\n\n  const getCityWeather = async (city_name) => {\n    const { data } = await axios.get(\n      \"https://api.weatherapi.com/v1/forecast.json?key=\" +\n        api +\n        \"&q=\" +\n        city_name +\n        \"&days=3&aqi=no&alerts=no/\"\n    );\n\n    let hoursData = [];\n\n    for (let day of data.forecast.forecastday) {\n      hoursData = hoursData.concat(day.hour);\n    }\n\n    const newHoursData = [];\n\n    data.current.time = \"Now\";\n\n    newHoursData.push(data.current);\n    let count = 0;\n\n    for (let hour of hoursData) {\n      if (count > 10) {\n        break;\n      }\n\n      if (data.current.last_updated_epoch > hour.time_epoch) {\n        continue;\n      }\n\n      hour.time = parseInt(hour.time.split(\" \")[1].split(\":\")[0]);\n\n      const daytag = hour.time > 11 ? \"PM\" : \"AM\";\n\n      hour.time = hour.time % 12;\n\n      hour.time = hour.time == 0 ? hour.time + 12 : hour.time;\n\n      hour.time = hour.time.toString() + daytag;\n      newHoursData.push(hour);\n      count = count + 1;\n    }\n\n    hoursData = newHoursData;\n\n    const currentComponent = (\n      <div className=\"currentWeather\">\n        <Helmet>\n          <script>\n            {\n              \"document.body.style.backgroundImage=`url('https://wallpaperaccess.com/full/1996509.jpg')`; \"\n            }\n          </script>\n        </Helmet>\n        <Container\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            opacity: 0.75,\n            alignItems: \"center\",\n          }}\n        >\n          <Card style={{ maxWidth: 440, maxHeight: 1200 }}>\n            <Typography gutterBottom variant=\"h5\" component=\"div\">\n              {data.location.name}\n            </Typography>\n            <Table>\n              <TableHead>\n                <TableRow class=\"heading\">\n                  <TableCell key=\"1\">\n                    {\" \"}\n                    <span>\n                      <CardMedia\n                        component=\"img\"\n                        height=\"64\"\n                        weight=\"64\"\n                        image={data.current.condition.icon}\n                        alt=\"weather icon\"\n                      />\n                    </span>\n                    <span>{data.current.condition.text}</span>\n                    <br />\n                    <span>{data.current.is_day == 1 ? \"Day\" : \"Night\"}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span class=\"fahrenheit\">{data.current.temp_f} F</span>\n                    <br />\n                    <span> Feels Like {data.current.feelslike_f} F</span>\n                  </TableCell>\n                </TableRow>\n              </TableHead>\n            </Table>\n\n            <CardContent>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                <Table>\n                  <TableHead>\n                    <TableRow class=\"heading\">\n                      <TableCell>Wind</TableCell>\n                      <TableCell>Humidity</TableCell>\n                      <TableCell>Visibility</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    <TableRow class=\"body\">\n                      <TableCell>{data.current.wind_mph} m/h</TableCell>\n                      <TableCell>{data.current.humidity} %</TableCell>\n                      <TableCell>{data.current.vis_miles} miles</TableCell>\n                    </TableRow>\n                    <TableRow class=\"heading\">\n                      <TableCell></TableCell>\n                      <TableCell>Low</TableCell>\n                      <TableCell>High</TableCell>\n                    </TableRow>\n                    <TableRow>\n                      {\" \"}\n                      <TableCell>Today</TableCell>\n                      <TableCell>\n                        {data.forecast.forecastday[0].day.mintemp_f + \" F\"}\n                      </TableCell>\n                      <TableCell>\n                        {data.forecast.forecastday[0].day.maxtemp_f + \" F\"}\n                      </TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell>Tomorrow</TableCell>\n                      <TableCell>\n                        {data.forecast.forecastday[1].day.mintemp_f + \" F\"}\n                      </TableCell>\n                      <TableCell>\n                        {data.forecast.forecastday[1].day.maxtemp_f + \" F\"}\n                      </TableCell>\n                    </TableRow>\n                    <TableRow>\n                      {\" \"}\n                      <TableCell>Day After Tomorrow</TableCell>\n                      <TableCell>\n                        {data.forecast.forecastday[2].day.mintemp_f + \" F\"}\n                      </TableCell>\n                      <TableCell>\n                        {data.forecast.forecastday[2].day.maxtemp_f + \" F\"}\n                      </TableCell>\n                    </TableRow>\n                  </TableBody>\n                </Table>\n              </Typography>\n            </CardContent>\n            <TableContainer style={{ maxHeight: 150 }}>\n              <Table stickyHeader>\n                <TableRow>\n                  {hoursData.map((hour, idx) => {\n                    return (\n                      <TableCell>\n                        <span>{hour.time}</span>\n                        <span>\n                          <CardMedia\n                            component=\"img\"\n                            height=\"60\"\n                            weight=\"60\"\n                            image={hour.condition.icon}\n                            alt=\"green iguana\"\n                          />\n                        </span>\n                        <span>{hour.temp_f + \" F\"} </span>\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              </Table>\n            </TableContainer>\n          </Card>\n        </Container>\n      </div>\n    );\n\n    setCurrentInfo(currentComponent);\n  };\n\n  useEffect(() => {\n    async function getData() {\n      if (location === \"\") {\n        return;\n      }\n\n      console.log(location);\n      const { data } = await axios.get(\n        \"https://api.weatherapi.com/v1/search.json?key=\" +\n          api +\n          \"&q=\" +\n          location +\n          \"/\"\n      );\n      setCityList(data);\n    }\n    getData();\n  }, [location]);\n\n  return (\n    <div class=\"MainComponent\">\n      <div class=\"searchComponent\" style={{ opacity: 0.75 }}>\n        <input\n          className=\"form-control\"\n          name=\"city\"\n          id=\"city\"\n          type=\"city\"\n          height=\"100\"\n          onInput={(e) => {\n            setLocation(e.target.value);\n          }}\n          onChange={() => {\n            setCurrentInfo(\"\");\n          }}\n          placeholder=\"Enter a minimum of three characters to search cities\"\n          value={location}\n          required\n        />\n        <br />\n        {cityList &&\n          cityList.map((cityName) => {\n            return (\n              <div key={cityName.name}>\n                <br />\n                <Button\n                  onClick={(e) => {\n                    getCityWeather(cityName.name);\n                    setCityList([]);\n                    setLocation(\"\");\n                  }}\n                  style={{\n                    color: \"black\",\n                    backgroundColor: \"#d3d3d3\",\n                    opacity: 0.9,\n                  }}\n                >\n                  {cityName.name}\n                </Button>\n              </div>\n            );\n          })}\n        <div id=\"myDropdown\" class=\"dropdown-content\"></div>\n      </div>\n      <br />\n      <br />\n      {currentInfo}\n    </div>\n  );\n};\n\nexport default SearchWeather;\n","import \"./App.css\";\nimport { React, useState } from \"react\";\nimport { HashRouter as Router, Route, Routes } from \"react-router-dom\";\nimport SearchWeather from \"./components/SearchWeather\";\n\nfunction App() {\n  const [color, setColor] = useState(\"red\");\n  return (\n    <Router>\n      <div className=\"App\">\n        <h1> Weather</h1>\n        <SearchWeather chanageBG={setColor} />\n        <Routes>\n          <Route exact path=\"/\" component={SearchWeather} />\n        </Routes>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}